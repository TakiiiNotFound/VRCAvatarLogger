import os
import re
import time
import requests
import http.client
import json

#thx to yuki for helping to connect to vrc api
#about 20% of the code is generated by chest gpt
#the script config need to be edited to work
#see github page for more info
#https://github.com/TakiiiNotFound/VRCAvatarLogger


def search_and_save_results(folder, output_file_path, pattern):
    existing_paths = load_existing_paths(output_file_path)
    unique_results = set()
    unique_paths = set()  
    for root, dirs, files in os.walk(folder):
        for file in files:
            if file.endswith("__lock") or file.endswith("__info"):
                continue 
            file_path = os.path.join(root, file)
            if file_path not in existing_paths:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as input_file:
                    for line in input_file:
                        matches = pattern.findall(line)
                        for match in matches:
                            if match not in unique_results:
                                unique_results.add(match)
                                avatar_info = get_avatar_info(match)
                                send_discord_message(match, file_path, avatar_info)
                                unique_paths.add(file_path)  
                                print(f'ID Captured: {match} - {file_path}')
                existing_paths.add(file_path)

    with open(output_file_path, 'a', encoding='utf-8') as output_file:
        for path in unique_paths:
            output_file.write(f"{path}\n")

def send_discord_message(id, path, avatar_info):
    try:
        avatar_info_json = json.loads(avatar_info)
        name = avatar_info_json.get("name", "Unknown")
        author_id = avatar_info_json.get("authorId", "Unknown")
        author_name = avatar_info_json.get("authorName", "Unknown")
        image_url = avatar_info_json.get("imageUrl", "Unknown")
        release_status = avatar_info_json.get("releaseStatus", "Unknown")
        
        if release_status == "Unknown":
            print("Skipping Discord message due to scanning issue or its a world")
            return
        
        message = (
            f"ID - {id}\n"
            f"Path - {path}\n"
            f"Name - {name}\n"
            f"Author - {author_name}\n"
            f"Author ID - {author_id}\n"
            f"Release Status - {release_status}\n"
            f"Image - {image_url}\n"
        )
        
        payload = {"content": message}
        headers = {"Content-Type": "application/json"}
        response = requests.post(webhook_url, json=payload, headers=headers)
        if response.status_code != 202:
            print(f"Failed to send message to Discord. Status code: {response.status_code}")
    except json.JSONDecodeError:
        print("Failed to parse JSON response from VRChat API")

def get_avatar_info(id):
    conn = http.client.HTTPSConnection('api.vrchat.cloud')
    headers = {
        'Cookie': 'auth=AUTH COOKIE HERE',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 OPR/107.0.0.0'
    }
    url = f"/api/1/avatars/{id}"
    conn.request("GET", url, headers=headers)
    response = conn.getresponse()
    if response.status != 200:
        print("Failed to fetch avatar info from VRChat API")
        return "{}" 
    else:
        return response.read().decode('utf-8')

def load_existing_paths(output_file_path):
    existing_paths = set()
    if os.path.exists(output_file_path):
        with open(output_file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if os.path.exists(line):
                    existing_paths.add(line)
    return existing_paths

pattern = re.compile(r'avtr_[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}')

folder = r'YOUR VRC CACHE PATH'  
output_file_path = r"C:\scan.txt"

webhook_url = "YOUR DISCORD WEBHOOK"

while True:
    print("Scanning...")
    search_and_save_results(folder, output_file_path, pattern)
    print("no new avatar found next scanne in 30 seconde")
    time.sleep(30)
